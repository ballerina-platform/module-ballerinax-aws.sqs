/*
 * Copyright (c) 2025, WSO2 LLC. (http://www.wso2.org).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'io.ballerina.plugin'
}

description = 'AWS SQS API Connector for Ballerina'

def packageName = "aws.sqs"
def packageOrg = "ballerinax"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def ballerinaTomlFIle = new File("${project.projectDir}/Ballerina.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

ballerina {
    packageOrganization = packageOrg
    module = packageName
    testCoverageParam = "--code-coverage --coverage-format=xml"
    isConnector = true
}

configurations {
    externalJars
}

dependencies {
    externalJars(group: 'software.amazon.awssdk', name: 'sqs', version: "${awsJavaSdkVersion}") {
    transitive = false
}
    externalJars(group: 'software.amazon.awssdk', name: 'aws-json-protocol', version: "${awsJavaSdkVersion}") {
    transitive = false
}
    externalJars(group: 'software.amazon.awssdk', name: 'protocol-core', version: "${awsJavaSdkVersion}") {
    transitive = false
}
    externalJars(group: 'software.amazon.awssdk', name: 'http-auth-aws', version: "${awsJavaSdkVersion}") {
    transitive = false
}
    externalJars(group: 'software.amazon.awssdk', name: 'bom', version: "${awsJavaSdkVersion}")

}


task updateTomlFiles {
    doLast {
        def newConfig = ballerinaTomlFilePlaceHolder.text.replace('@project.version@', project.version.toString())
        newConfig = newConfig.replace('@toml.version@', tomlVersion)
        newConfig = newConfig.replace('@sql.native.version@', project.stdlibSqlVersion)
                ballerinaTomlFile.text = newConfig
    }
}

task commitTomlFiles {
    doLast {
    //    project.exec {
    //        ignoreExitValue true
    //        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    //            commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the toml files\" Ballerina.toml Dependencies.toml"
    //        } else {
    //            commandLine 'sh', '-c', "git commit -m '[Automated] Update the toml files' Ballerina.toml Dependencies.toml"
    //        }
    //    }
    }
}

clean {
    delete 'build'
}

build.dependsOn ":aws.sqs-native:build"
test.dependsOn ":aws.sqs-native:build"
build.dependsOn copyToLib
publish.dependsOn build